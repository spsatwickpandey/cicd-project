name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: cicd-nodejs-api
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Cache dependencies for faster builds
  cache-dependencies:
    name: Cache Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache node_modules
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  # Lint and Format Check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    needs: cache-dependencies
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Check Prettier formatting
        run: npm run format:check
        
      - name: Upload lint results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lint-results
          path: |
            .eslintcache
            coverage/

  # Unit Tests with Coverage
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: cache-dependencies
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests with coverage
        run: npm run test:ci
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: coverage/

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: cache-dependencies
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          
      - name: Upload security results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-results
          path: |
            snyk-report.json
            npm-audit.json

  # Integration Tests with Cypress
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [cache-dependencies, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Cypress
        run: npm install cypress --save-dev
        
      - name: Start application
        run: |
          npm start &
          sleep 10
          
      - name: Run Cypress tests
        run: npx cypress run --headless
        env:
          CYPRESS_BASE_URL: http://localhost:3000
          
      - name: Upload Cypress results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-results
          path: cypress/videos/
          retention-days: 7

  # SonarCloud Analysis
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [cache-dependencies, test]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests for SonarCloud (with coverage)
        run: npm run test:coverage
        
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.organization=your-org_or_username
            -Dsonar.projectKey=your-org_or_username_cicd-nodejs-api
            -Dsonar.qualitygate.wait=true
            -Dsonar.pullrequest.github.summary_comment=true
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.test.js,**/*.spec.js,**/tests/**
            -Dsonar.testExecutionReportPaths=coverage/test-report.xml
            -Dsonar.branch.name=${{ github.ref_name }}
            -Dsonar.branch.target=${{ github.base_ref }}
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.pullrequest.provider=GitHub
            -Dsonar.pullrequest.github.repository=${{ github.repository }}
            -Dsonar.pullrequest.github.summary_comment=true
      - name: Upload SonarCloud Quality Gate Status
        if: always()
        run: echo "SonarCloud Quality Gate status: ${{ steps.sonarcloud.outputs.quality_gate_status }}"

  # Lighthouse CI Performance Testing
  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: [cache-dependencies, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
        
      - name: Start application
        run: |
          npm start &
          sleep 15
          
      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/

  # Docker Build and Test
  docker:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test Docker image
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest npm test
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest npm run lint

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker, integration-tests, lighthouse]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          # Add your staging deployment commands here
          # Example: kubectl apply, docker push, etc.
          
      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          # Add your smoke test commands here
          # Example: curl health check endpoints
          
      - name: Notify Discord - Staging Success
        if: success()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          content: |
            🚀 **Staging Deployment Successful**
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Environment: Staging
            [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
      - name: Notify Discord - Staging Failure
        if: failure()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          content: |
            ❌ **Staging Deployment Failed**
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Environment: Staging
            [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, integration-tests, lighthouse]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          # Add your production deployment commands here
          # Example: kubectl apply, docker push, etc.
          
      - name: Run smoke tests
        run: |
          echo "Running smoke tests against production..."
          # Add your smoke test commands here
          # Example: curl health check endpoints
          
      - name: Notify Discord - Production Success
        if: success()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          content: |
            🎉 **Production Deployment Successful**
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Environment: Production
            [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
      - name: Notify Discord - Production Failure
        if: failure()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          content: |
            🚨 **Production Deployment Failed**
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Environment: Production
            [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

  # Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [test, security, sonarcloud]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests for coverage check
        run: npm run test:coverage
        
      - name: Check coverage thresholds
        run: |
          # Check if coverage meets minimum thresholds
          COVERAGE=$(npm run test:coverage --silent | grep -o 'All files[^%]*' | grep -o '[0-9]*\.[0-9]*%' | head -1 | sed 's/%//')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Coverage is below 80% threshold: $COVERAGE%"
            exit 1
          fi
          echo "Coverage threshold met: $COVERAGE%"
          
      - name: Check security vulnerabilities
        run: |
          # Check for high/critical vulnerabilities
          VULNERABILITIES=$(npm audit --audit-level=high --json | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical')
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "Found $VULNERABILITIES high/critical vulnerabilities"
            exit 1
          fi
          echo "No high/critical vulnerabilities found"

  # Final Notification
  notify:
    name: Pipeline Notification
    runs-on: ubuntu-latest
    needs: [quality-gates, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify Discord - Pipeline Complete
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          content: |
            📊 **Pipeline Complete**
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Status: ${{ needs.quality-gates.result }}
            [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) 